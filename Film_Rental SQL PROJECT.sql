#SQL PROJECT 2 

use film_rental;

show tables;

#1. What is the total revenue generated from all rentals in the database? 
SELECT 
    SUM(amount) AS total_revenue
FROM
    payment;

#2.How many rentals were made in each month_name? 
SELECT 
    MONTHNAME(rental_date) AS month_name,
    COUNT(*) AS rental_count
FROM
    rental
GROUP BY month_name;

#3.	What is the rental rate of the film with the longest title in the database ?
SELECT 
    rental_rate
FROM
    film
WHERE
    LENGTH(title) = (SELECT 
            MAX(LENGTH(title))
        FROM
            film);

#4.What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? 
SELECT 
    AVG(rental_rate) AS average_rental_rate
FROM
    film
WHERE
    last_update >= DATE_SUB('2005-05-05 22:04:30',
        INTERVAL 30 DAY);
        
#5.What is the most popular category of films in terms of the number of rentals? 
SELECT 
    c.name AS category, COUNT(*) AS rental_count
FROM
    category c
        JOIN
    film_category fc USING (category_id)
        JOIN
    film f USING (film_id)
        JOIN
    inventory i USING (film_id)
        JOIN
    rental r USING (inventory_id)
GROUP BY c.category_id
ORDER BY rental_count DESC
LIMIT 1;

#6.	Find the longest movie duration from the list of films that have not been rented by any customer. 
SELECT 
    f.title AS movie_name, f.length AS movie_duration
FROM
    film f
        LEFT JOIN
    inventory i USING (film_id)
WHERE
    i.film_id IS NULL
ORDER BY f.length DESC
LIMIT 1;
#7.	What is the average rental rate for films, broken down by category? 
SELECT 
    c.name AS category,
    AVG(f.rental_rate) AS average_rental_rate
FROM
    film f
        JOIN
    film_category fc USING (film_id)
        JOIN
    category c USING (category_id)
GROUP BY c.name
ORDER BY average_rental_rate DESC;

#8.	What is the total revenue generated from rentals for each actor in the database? 
SELECT 
    a.actor_id,
    CONCAT(a.first_name, ' ', a.last_name) AS actor_name,
    SUM(p.amount) AS total_revenue
FROM
    actor a
        JOIN
    film_actor fa USING (actor_id)
        JOIN
    film f USING (film_id)
        JOIN
    inventory i USING (film_id)
        JOIN
    rental r USING (inventory_id)
        JOIN
    payment p USING (rental_id)
GROUP BY a.actor_id , actor_name
ORDER BY total_revenue DESC;

#9.Show all the actresses who worked in a film having a "Wrestler" in the description ?
SELECT 
    GROUP_CONCAT(CONCAT(a.first_name, ' ', a.last_name)) AS actor_name,
    GROUP_CONCAT(a.actor_id) actor_ids,
    f.description
FROM
    actor a
        JOIN
    film_actor fa ON a.actor_id = fa.actor_id
        JOIN
    film f ON fa.film_id = f.film_id
WHERE
    f.description LIKE '%wrestler%'
GROUP BY f.description;



#10.Which customers have rented the same film more than once? 
SELECT 
    CONCAT_WS('  ', c.first_name, c.last_name) AS customer_full_name,
    i.film_id,
    COUNT(*) AS rental_count
FROM
    customer c
        JOIN
    rental r USING (customer_id)
        JOIN
    inventory i USING (inventory_id)
GROUP BY c.customer_id , i.film_id
HAVING COUNT(*) > 1
ORDER BY i.film_id;

#11.How many films in the comedy category have a rental rate higher than the average rental rate?
SELECT 
    COUNT(*)
FROM
    film f
        JOIN
    film_category fc USING (film_id)
        JOIN
    category c USING (category_id)
WHERE
    c.name = 'comedy'
        AND f.rental_rate > (SELECT 
            AVG(rental_rate)
        FROM
            film);

#12.Which films have been rented the most by customers living in each city? 
SELECT 
    ci.city, f.title, COUNT(*) AS rental_count
FROM
    rental r
        JOIN
    inventory i USING (inventory_id)
        JOIN
    film f USING (film_id)
        JOIN
    customer c USING (customer_id)
        JOIN
    address a USING (address_id)
        JOIN
    city ci USING (city_id)
GROUP BY ci.city_id , f.film_id
ORDER BY COUNT(*) DESC;

#13.What is the total amount spent by customers whose rental payments exceed $200? 
SELECT 
    c.customer_id,
    CONCAT_WS('  ', c.first_name, c.last_name) AS customer_full_name,
    SUM(p.amount) AS total_amount_spent
FROM
    customer c
        JOIN
    payment p USING (customer_id)
GROUP BY c.customer_id , customer_full_name
HAVING SUM(p.amount) > 200
ORDER BY SUM(p.amount);

#14.Display the fields which are having foreign key constraints related to the "rental" table?
SELECT 
    CONSTRAINT_NAME,
    COLUMN_NAME,
    REFERENCED_TABLE_NAME,
    REFERENCED_COLUMN_NAME
FROM
    INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE
    TABLE_NAME = 'rental'
        AND CONSTRAINT_NAME <> 'PRIMARY'
        AND referenced_table_name IS NOT NULL;

#15.Create a View for the total revenue generated by each staff member, broken down by store city with the country name?
CREATE VIEW staf_revenue_view AS
    SELECT 
        s.staff_id,
        CONCAT(c.city, ',', co.country) AS store_location,
        SUM(p.amount) AS total_revenue
    FROM
        staff s
            JOIN
        store st ON s.staff_id = st.manager_staff_id
            JOIN
        address a ON st.address_id = a.address_id
            JOIN
        city c ON a.city_id = c.city_id
            JOIN
        country co ON c.country_id = co.country_id
            JOIN
        payment p ON s.staff_id = p.staff_id
    GROUP BY s.staff_id , store_location;
    
    
SELECT * FROM staf_revenue_view;


#16.Create a view based on rental information consisting of visiting_day, customer_name, the title of the film,  no_of_rental_days, the amount paid by the customer along with the percentage of customer spending?
CREATE VIEW rental_summary_view AS
    SELECT 
        r.rental_date AS visiting_day,
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
        f.title AS film_title,
        DATEDIFF(r.return_date, r.rental_date) AS no_of_rental_days,
        p.amount AS amount_paid,
        (p.amount / (SELECT 
                SUM(amount)
            FROM
                payment
            WHERE
                customer_id = c.customer_id)) * 100 AS spending_percentage
    FROM
        rental r
            JOIN
        customer c ON r.customer_id = c.customer_id
            JOIN
        payment p ON r.rental_id = p.rental_id
            JOIN
        inventory i ON r.inventory_id = i.inventory_id
            JOIN
        film f ON i.film_id = f.film_id;
SELECT * FROM rental_summary_view;

#17.Display the customers who paid 50% of their total rental costs within one day?
SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    r.rental_id,
    r.rental_date,
    r.return_date,
    p.amount AS payment_amount,
    total_rental_cost,
    CASE
        WHEN total_rental_cost > 0 THEN (p.amount / total_rental_cost) * 100
        ELSE NULL
    END AS payment_percentage
FROM
    customer c
        JOIN
    rental r ON c.customer_id = r.customer_id
        LEFT JOIN
    (SELECT 
        r.rental_id, SUM(f.rental_rate) AS total_rental_cost
    FROM
        rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    GROUP BY r.rental_id) AS rental_costs ON r.rental_id = rental_costs.rental_id
        LEFT JOIN
    payment p ON r.rental_id = p.rental_id
WHERE
    DATEDIFF(p.payment_date, r.rental_date) = 0
        AND (p.amount / total_rental_cost) * 100 >= 50
ORDER BY c.customer_id , r.rental_id;
